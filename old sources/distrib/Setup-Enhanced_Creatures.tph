// Patch creatures according to several 2da files
DEFINE_ACTION_MACRO ~PATCH_CREATURES~ BEGIN
// Input parameters:
//   basename_file : base name of file

// Constitution affects monsters hit points (0 / 1)
OUTER_SET ~conBonus~ = 1

// New experience system (0 / 1)
OUTER_SET ~newExperience~ = 1

// Check if BG1 Walking Speed is installed
OUTER_SET ~walking_speed~ = 0
ACTION_IF FILE_EXISTS_IN_GAME ~cdt01210.g3~ THEN BEGIN
	OUTER_SET ~walking_speed~ = 1
END

OUTER_SPRINT creature_file  ~%basename_file%_data.2da~
COPY ~Enhanced_Creatures/%creature_file%~ ~override~
    COUNT_2DA_ROWS 150 rows
    FOR (index = 0; index < rows; index += 1) BEGIN
        READ_2DA_ENTRY %index% 0    150 cre
        READ_2DA_ENTRY %index% 1    150 gender
        READ_2DA_ENTRY %index% 2    150 sex
        READ_2DA_ENTRY %index% 3    150 alignment
        READ_2DA_ENTRY %index% 4    150 allegiance
        READ_2DA_ENTRY %index% 5    150 morale
        READ_2DA_ENTRY %index% 6    150 morale_break
        READ_2DA_ENTRY %index% 7    150 animation
        READ_2DA_ENTRY %index% 8    150 general
        READ_2DA_ENTRY %index% 9    150 race
        READ_2DA_ENTRY %index% 10   150 class
        READ_2DA_ENTRY %index% 11   150 class_flag
        READ_2DA_ENTRY %index% 12   150 kit
        READ_2DA_ENTRY %index% 13   150 movement_speed
        READ_2DA_ENTRY %index% 14   150 level1
        READ_2DA_ENTRY %index% 15   150 level2
        READ_2DA_ENTRY %index% 16   150 level3
        READ_2DA_ENTRY %index% 17   150 caster_level
        READ_2DA_ENTRY %index% 18   150 current_hp
        READ_2DA_ENTRY %index% 19   150 max_hp
        READ_2DA_ENTRY %index% 20   150 armor_class
        READ_2DA_ENTRY %index% 21   150 thac0
        READ_2DA_ENTRY %index% 22   150 num_attack
        READ_2DA_ENTRY %index% 23   150 double_attack
        READ_2DA_ENTRY %index% 24   150 experience
        READ_2DA_ENTRY %index% 25   150 save_breath
        READ_2DA_ENTRY %index% 26   150 save_death
        READ_2DA_ENTRY %index% 27   150 save_poly
        READ_2DA_ENTRY %index% 28   150 save_spell
        READ_2DA_ENTRY %index% 29   150 save_wand
        READ_2DA_ENTRY %index% 30   150 strength
        READ_2DA_ENTRY %index% 31   150 strength_exc
        READ_2DA_ENTRY %index% 32   150 dexterity
        READ_2DA_ENTRY %index% 33   150 constitution
        READ_2DA_ENTRY %index% 34   150 intelligence
        READ_2DA_ENTRY %index% 35   150 wisdom
        READ_2DA_ENTRY %index% 36   150 charisma
        READ_2DA_ENTRY %index% 37   150 hide_shadow
        READ_2DA_ENTRY %index% 38   150 move_silently
        READ_2DA_ENTRY %index% 39   150 detect_illusion
        READ_2DA_ENTRY %index% 40   150 slashing_ac
        READ_2DA_ENTRY %index% 41   150 crushing_ac
        READ_2DA_ENTRY %index% 42   150 piercing_ac
        READ_2DA_ENTRY %index% 43   150 missile_ac
        READ_2DA_ENTRY %index% 44   150 resist_crushing
        READ_2DA_ENTRY %index% 45   150 resist_slashing
        READ_2DA_ENTRY %index% 46   150 resist_piercing
        READ_2DA_ENTRY %index% 47   150 resist_missile
        READ_2DA_ENTRY %index% 48   150 resist_magic
        READ_2DA_ENTRY %index% 49   150 resist_acid
        READ_2DA_ENTRY %index% 50   150 resist_electricity
        READ_2DA_ENTRY %index% 51   150 resist_cold
        READ_2DA_ENTRY %index% 52   150 resist_magic_cold
        READ_2DA_ENTRY %index% 53   150 resist_fire
        READ_2DA_ENTRY %index% 54   150 resist_magic_fire
        READ_2DA_ENTRY %index% 55   150 override_Script
        READ_2DA_ENTRY %index% 56   150 race_Script
        READ_2DA_ENTRY %index% 57   150 class_Script
        READ_2DA_ENTRY %index% 58   150 general_Script
        READ_2DA_ENTRY %index% 59   150 default_Script
        READ_2DA_ENTRY %index% 60   150 equiped_weapon
        READ_2DA_ENTRY %index% 61   150 prof_lsword
        READ_2DA_ENTRY %index% 62   150 prof_ssword
        READ_2DA_ENTRY %index% 63   150 prof_bow
        READ_2DA_ENTRY %index% 64   150 prof_spear
        READ_2DA_ENTRY %index% 65   150 prof_blunt
        READ_2DA_ENTRY %index% 66   150 prof_spike
        READ_2DA_ENTRY %index% 67   150 prof_axe
        READ_2DA_ENTRY %index% 68   150 prof_missile
        READ_2DA_ENTRY %index% 69   150 delete_innate
        READ_2DA_ENTRY %index% 70   150 delete_priest
        READ_2DA_ENTRY %index% 71   150 delete_wizard
        READ_2DA_ENTRY %index% 72   150 constitution_bonus
        READ_2DA_ENTRY %index% 73   150 delete_effects
        READ_2DA_ENTRY %index% 74   150 name_reference
        READ_2DA_ENTRY %index% 75   150 experience_pnp

        SET colnum = 76
        FOR(itmnum = 1; itmnum <= 37; itmnum += 1 ) BEGIN
            READ_2DA_ENTRY %index% %colnum% 150 itemname
            READ_2DA_ENTRY %index% %colnum%+1 150 itemqty
            SPRINT EVALUATE_BUFFER ~itemname%itmnum%~ ~%itemname%~
            SPRINT EVALUATE_BUFFER ~itemqty%itmnum%~ ~%itemqty%~
            SET colnum += 2
        END

        PATCH_PRINT ~Looking for %cre%.CRE~

        INNER_ACTION BEGIN
        ACTION_IF FILE_EXISTS_IN_GAME ~%cre%.CRE~ THEN BEGIN
            COPY_EXISTING ~%cre%.CRE~ ~override~

                // Name 
                PATCH_IF (! "%name_reference%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_LONG  0x8 %name_reference%
                    WRITE_LONG  0xc %name_reference%
                END
        
                // Gender
                PATCH_IF (! "%gender%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x275 %gender%
                END
                
                // Sex
                PATCH_IF (! "%sex%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x237 %sex%
                END
            
                // Alignment
                PATCH_IF (! "%alignment%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x27b %alignment%
                END

                // Allegiance
                PATCH_IF (! "%allegiance%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x270 %allegiance%
                END

                // Morale
                PATCH_IF (! "%morale%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x23f %morale%        
                END

                // Morale break
                PATCH_IF (! "%morale_break%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x240 %morale_break%        
                END
            
                // Animation
                PATCH_IF (! "%animation%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_SHORT  0x28 %animation%    
                END

                // General
                PATCH_IF (! "%general%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x271 %general%        
                END

                // Race
                PATCH_IF (! "%race%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x272 %race%            
                END

                // Class
                PATCH_IF (! "%class%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x273 %class%    
                END
                
                // Class flag
                PATCH_IF (! "%class_flag%" STRING_EQUAL "[NULL]") BEGIN
                    READ_BYTE 0x10 class_flag1
                    READ_BYTE 0x11 class_flag2
                    // Remove all dual class flag
                    SET class_flag1 = %class_flag1% BAND 0b00000111
                    SET class_flag2 = %class_flag2% BAND 0b01111111
                    PATCH_IF (%class_flag% == 1) BEGIN
                        //SET class_flag1 = %class_flag1% BOR 0b00010000
                        SET class_flag1 = %class_flag1% BOR 0b00001000
                    END
                    PATCH_IF (%class_flag% == 2) BEGIN
                        //SET dualclass_flag1 = %dualclass_flag1% BOR 0b00001000
                        SET class_flag1 = %class_flag1% BOR 0b00010000
                    END
                    PATCH_IF (%class_flag% == 3) BEGIN
                        //SET class_flag1 = %class_flag1% BOR 0b00000100
                        SET class_flag1 = %class_flag1% BOR 0b00100000
                    END
                    PATCH_IF (%class_flag% == 4) BEGIN
                        //SET class_flag1 = %class_flag1% BOR 0b00000010
                        SET class_flag1 = %class_flag1% BOR 0b01000000
                    END
                    PATCH_IF (%class_flag% == 5) BEGIN
                        //SET class_flag1 = %class_flag1% BOR 0b00000001
                        SET class_flag1 = %class_flag1% BOR 0b10000000
                    END
                    PATCH_IF (%class_flag% == 6) BEGIN
                        //SET class_flag2 = %class_flag2% BOR 0b10000000
                        SET class_flag2 = %class_flag2% BOR 0b00000001
                    END
                    WRITE_BYTE 0x10 %class_flag1%
                    WRITE_BYTE 0x11 %class_flag2%
                END

                // Kit
                PATCH_IF (! "%kit%" STRING_EQUAL "[NULL]") BEGIN
                    //PATCH_PRINT ~kit = %kit%~
                    WRITE_LONG 0x244 %kit%
                END

                // Level 1
                PATCH_IF (! "%level1%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x234 %level1%        
                END

                // Level 2
                PATCH_IF (! "%level2%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x235 %level2%        
                END

                // Level 3
                PATCH_IF (! "%level3%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x236 %level3%        
                END
                
                // TODO : handle caster level
                
                PATCH_IF ("%constitution_bonus%" STRING_EQUAL "[NULL]") BEGIN
                  SET constitution_bonus = 0
                END
                PATCH_IF %conBonus% = 0 BEGIN
                  SET constitution_bonus = 0
                END
                
                // Current HP
                PATCH_IF (! "%current_hp%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_SHORT 0x24 %current_hp% + %constitution_bonus%            
                END

                // Maximum HP
                PATCH_IF (! "%max_hp%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_SHORT 0x26 %max_hp% + %constitution_bonus%            
                END

                // Armor Class
                PATCH_IF (! "%armor_class%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_SHORT 0x46 %armor_class%      // Natural AC
                    WRITE_SHORT 0x48 %armor_class%      // Effective AC
                END

                // Thac0
                PATCH_IF (! "%thac0%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x52 %thac0%        
                END

                // Attacks per round
                PATCH_IF (! "%num_attack%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x53 %num_attack%
                END

                // Experience
                PATCH_IF %newExperience% = 1 BEGIN
                  PATCH_IF (! "%experience%" STRING_EQUAL "[NULL]") BEGIN
                      WRITE_LONG  0x14 %experience%            
                  END
                END

                // Save vs Breath
                PATCH_IF (! "%save_breath%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE  0x57 %save_breath%            
                END

                // Save vs Death
                PATCH_IF (! "%save_death%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE  0x54 %save_death%            
                END

                // Save vs Poly
                PATCH_IF (! "%save_poly%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE  0x56 %save_poly%            
                END

                // Save vs Spell
                PATCH_IF (! "%save_spell%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE  0x58 %save_spell%            
                END

                // Save vs Wand
                PATCH_IF (! "%save_wand%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE  0x55 %save_wand%            
                END

                // Strength
                PATCH_IF (! "%strength%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x238 %strength%        
                END
                
                // Exceptionnal Strength
                PATCH_IF (! "%strength_exc%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x239 %strength_exc%        
                END

                // Dexterity
                PATCH_IF (! "%dexterity%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x23c %dexterity%        
                END

                // Constitution
                PATCH_IF (! "%constitution%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x23d %constitution%        
                END
                
                // Intelligence
                PATCH_IF (! "%intelligence%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x23a %intelligence%        
                END

                // Wisdom                
                PATCH_IF (! "%wisdom%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x23b %wisdom%
                END
                
                // Charisma
                PATCH_IF (! "%charisma%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x23e %charisma%        
                END
                
                // Hide in shadows
                PATCH_IF (! "%hide_shadow%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x45 %hide_shadow%        
                END                
                
                // Move silently
                PATCH_IF (! "%move_silently%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x68 %move_silently%        
                END                

                // Detect illusion
                PATCH_IF (! "%detect_illusion%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x64 %detect_illusion%        
                END                

                // Slahing AC
                PATCH_IF (! "%slashing_ac%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_SHORT 0x50 %slashing_ac%        
                END                

                // Crushing AC
                PATCH_IF (! "%crushing_ac%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_SHORT 0x4a %crushing_ac%        
                END                

                // Piercing AC
                PATCH_IF (! "%piercing_ac%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_SHORT 0x4e %piercing_ac%        
                END                

                // Missile AC
                PATCH_IF (! "%missile_ac%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_SHORT 0x4c %missile_ac%        
                END                

                // Resist crushing
                PATCH_IF (! "%resist_crushing%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x61 %resist_crushing%        
                END

                // Resist slashing
                PATCH_IF (! "%resist_slashing%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x60 %resist_slashing%        
                END
                
                // Resist piercing
                PATCH_IF (! "%resist_piercing%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x62 %resist_piercing%        
                END
                
                // Resist missile
                PATCH_IF (! "%resist_missile%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x63 %resist_missile%        
                END

                // Resist fire
                PATCH_IF (! "%resist_fire%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x59 %resist_fire%        
                END
                
                // Resist cold
                PATCH_IF (! "%resist_cold%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x5a %resist_cold%        
                END
                
                // Resist electricity
                PATCH_IF (! "%resist_electricity%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x5b %resist_electricity%        
                END
                
                // Resist acid
                PATCH_IF (! "%resist_acid%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x5c %resist_acid%        
                END
                
                // Resist magic
                PATCH_IF (! "%resist_magic%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x5d %resist_magic%        
                END
                
                // Resist magical fire
                PATCH_IF (! "%resist_magic_fire%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x5e %resist_magic_fire%        
                END
                
                // Resist magical cold
                PATCH_IF (! "%resist_magic_cold%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x5f %resist_magic_cold%        
                END

                // Override Script
                PATCH_IF (! "%override_Script%" STRING_EQUAL "[NULL]") BEGIN
                    PATCH_IF (! "%override_Script%" STRING_EQUAL "[REMOVE]") BEGIN
                        WRITE_EVALUATED_ASCII SCRIPT_OVERRIDE ~%override_Script%~ #8
                    END ELSE BEGIN
                        WRITE_LONG SCRIPT_OVERRIDE 0x00
                    END
                END
                
                // Race Script
                PATCH_IF (! "%race_Script%" STRING_EQUAL "[NULL]") BEGIN
                    PATCH_IF (! "%race_Script%" STRING_EQUAL "[REMOVE]") BEGIN
                        WRITE_EVALUATED_ASCII SCRIPT_CLASS ~%race_Script%~ #8
                    END ELSE BEGIN
                        WRITE_LONG SCRIPT_CLASS 0x00
                    END
                END
                
                // Class Script
                PATCH_IF (! "%class_Script%" STRING_EQUAL "[NULL]") BEGIN
                    PATCH_IF (! "%class_Script%" STRING_EQUAL "[REMOVE]") BEGIN
                        WRITE_EVALUATED_ASCII SCRIPT_RACE ~%class_Script%~ #8
                    END ELSE BEGIN
                        WRITE_LONG SCRIPT_RACE 0x00
                    END
                END
                
                // General Script
                PATCH_IF (! "%general_Script%" STRING_EQUAL "[NULL]") BEGIN
                    PATCH_IF (! "%general_Script%" STRING_EQUAL "[REMOVE]") BEGIN
                        WRITE_EVALUATED_ASCII SCRIPT_GENERAL ~%general_Script%~ #8
                    END ELSE BEGIN
                        WRITE_LONG SCRIPT_GENERAL 0x00
                    END
                END
                
                // Default Script
                PATCH_IF (! "%default_Script%" STRING_EQUAL "[NULL]") BEGIN
                    PATCH_IF (! "%default_Script%" STRING_EQUAL "[REMOVE]") BEGIN
                        WRITE_EVALUATED_ASCII SCRIPT_DEFAULT ~%default_Script%~ #8
                    END ELSE BEGIN
                        WRITE_LONG SCRIPT_DEFAULT 0x00
                    END
                END
                
                // Large sword
                PATCH_IF (! "%prof_lsword%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x6e %prof_lsword%        
                END
                
                // Short sword
                PATCH_IF (! "%prof_ssword%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x6f %prof_ssword%        
                END
                
                // Bow
                PATCH_IF (! "%prof_bow%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x70 %prof_bow%            
                END
                
                // Spear
                PATCH_IF (! "%prof_spear%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x71 %prof_spear%        
                END
                
                // Blunt
                PATCH_IF (! "%prof_blunt%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x72 %prof_blunt%        
                END
                
                // Spike
                PATCH_IF (! "%prof_spike%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x73 %prof_spike%        
                END
                
                // Axe
                PATCH_IF (! "%prof_axe%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x74 %prof_axe%            
                END
                
                // Missile
                PATCH_IF (! "%prof_missile%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_BYTE 0x75 %prof_missile%        
                END

                // ************************************************************************                
                // Read offset for spells-effects-items-slots
                // ************************************************************************                
                READ_BYTE 0x0033 effect_flag
                READ_LONG 0x02a8 mem_info_off
                READ_LONG 0x02b0 mem_spell_off
                READ_LONG 0x02b4 mem_spell_count
                READ_LONG 0x02b8 slot_off
                READ_LONG 0x02bc item_off
                READ_LONG 0x02c0 item_count
                READ_LONG 0x02c4 effect_off
                READ_LONG 0x02c8 effect_count
                
                // ************************************************************************                
                // Spells
                // ************************************************************************                

                // Delete priest spells (if checked) and initialize number of spells
                PATCH_IF (%delete_priest% = 1) BEGIN
                  READ_LONG (%mem_info_off% + 0 * 0x10 + 0x08) idx_start
                  READ_LONG (%mem_info_off% + 7 * 0x10 + 0x08) idx_end
                  FOR (i = 0; i <= 6; i += 1) BEGIN
                    READ_LONG   (%mem_info_off% + %i% * 0x10 + 0x0c) spell_count
                    SET mem_spell_count -= %spell_count%
                    WRITE_LONG  (%mem_info_off% + %i% * 0x10 + 0x08) %idx_start%
                    WRITE_SHORT (%mem_info_off% + %i% * 0x10 + 0x0c) 0
                  END
                  SET offset = (%idx_end% - %idx_start%) * 0x0c
                  DELETE_BYTES (%mem_spell_off% + %idx_start% * 0x0c) %offset%
                  FOR (i = 7; i <= 16; i += 1) BEGIN
                    READ_LONG  (%mem_info_off% + %i% * 0x10 + 0x08) idx
                    WRITE_LONG (%mem_info_off% + %i% * 0x10 + 0x08) %idx% - (%idx_end% - %idx_start%)
                  END
                  SET effect_off -= %offset%
                  SET item_off   -= %offset%
                  SET slot_off   -= %offset%
                END

                // Delete wizard spells (if checked) and initialize number of spells
                PATCH_IF (%delete_wizard% = 1) BEGIN
                  READ_LONG (%mem_info_off% +  7 * 0x10 + 0x08) idx_start
                  READ_LONG (%mem_info_off% + 16 * 0x10 + 0x08) idx_end
                  FOR (i = 7; i <= 15; i += 1) BEGIN
                    READ_LONG   (%mem_info_off% + %i% * 0x10 + 0x0c) spell_count
                    SET mem_spell_count -= %spell_count%
                    WRITE_LONG  (%mem_info_off% + %i% * 0x10 + 0x08) %idx_start%
                    WRITE_SHORT (%mem_info_off% + %i% * 0x10 + 0x0c) 0
                  END
                  SET offset = (%idx_end% - %idx_start%) * 0x0c
                  DELETE_BYTES (%mem_spell_off% + %idx_start% * 0x0c) %offset%
                  READ_LONG  (%mem_info_off% + 16 * 0x10 + 0x08) idx
                  WRITE_LONG (%mem_info_off% + 16 * 0x10 + 0x08) %idx% - (%idx_end% - %idx_start%)
                  SET effect_off -= %offset%
                  SET item_off   -= %offset%
                  SET slot_off   -= %offset%
                END

                // Delete innate spells (if checked) and initialize number of spells
                PATCH_IF (%delete_innate% = 1) BEGIN
                  READ_LONG (%mem_info_off% + 16 * 0x10 + 0x08) idx_start
                  READ_LONG (%mem_info_off% + 16 * 0x10 + 0x0c) spell_count
                  SET mem_spell_count -= %spell_count%
                  WRITE_SHORT (%mem_info_off% + 16 * 0x10 + 0x0c) 0
                  SET offset = %spell_count% * 0x0c
                  DELETE_BYTES (%mem_spell_off% + %idx_start% * 0x0c) %offset%
                  SET effect_off -= %offset%
                  SET item_off   -= %offset%
                  SET slot_off   -= %offset%
                END
                
                // ************************************************************************                
                // Effects
                // ************************************************************************                

                // Check which version of effects we can use. 1 (EFF 2.0) if possible (no effect with 1.0)
                PATCH_IF %effect_flag% = 0 AND %effect_count% = 0 BEGIN
                    WRITE_BYTE 0x33 1
                    SET effect_flag = 1
                END

                PATCH_IF %effect_flag% = 0 BEGIN
                    PATCH_PRINT ~Warning : Effects are in version 1.0, must remove them !~
                    SET delete_effects = 1
                END

                // Remove existing effects
                PATCH_IF (%delete_effects% = 1) BEGIN
                  SET offset = %effect_count% * 0x108
                  DELETE_BYTES %effect_off% %offset%
                  SET effect_count = 0
                  SET item_off -= %offset%
                  SET slot_off -= %offset%
                END
                
                // Create effects list
				        SET fx_num = 0
                SPRINT effect_file  ~2da/%cre%_effects.2da~
                INNER_ACTION BEGIN
                ACTION_IF FILE_EXISTS ~Enhanced_Creatures/%effect_file%~ THEN BEGIN
                COPY ~Enhanced_Creatures/%effect_file%~ ~override~
                    COUNT_2DA_ROWS 12 fx_rows
                    SET fx_line = 0
                    WHILE (%fx_line% < %fx_rows%) BEGIN
                        READ_2DA_ENTRY %fx_line% 0 12 fx_creature
                        READ_2DA_ENTRY %fx_line% 1 12 fx_type
                        READ_2DA_ENTRY %fx_line% 2 12 fx_target
                        READ_2DA_ENTRY %fx_line% 3 12 fx_param1
                        READ_2DA_ENTRY %fx_line% 4 12 fx_param2
                        READ_2DA_ENTRY %fx_line% 5 12 fx_resource
                        READ_2DA_ENTRY %fx_line% 6 12 fx_timing
                        READ_2DA_ENTRY %fx_line% 7 12 fx_probability1
                        READ_2DA_ENTRY %fx_line% 8 12 fx_probability2
                        READ_2DA_ENTRY %fx_line% 9 12 fx_duration
                        READ_2DA_ENTRY %fx_line% 9 12 fx_power
                        READ_2DA_ENTRY %fx_line% 9 12 fx_dispel
                        //PATCH_PRINT ~Read line %fx_line% / %fx_rows% : %fx_creature% , %fx_type% %fx_resource%~
                        // Add effect to list
                        SET fx_num += 1
                        SPRINT EVALUATE_BUFFER ~effect_%fx_num%_type~ ~%fx_type%~
                        SPRINT EVALUATE_BUFFER ~effect_%fx_num%_target~ ~%fx_target%~
                        SPRINT EVALUATE_BUFFER ~effect_%fx_num%_param1~ ~%fx_param1%~
                        SPRINT EVALUATE_BUFFER ~effect_%fx_num%_param2~ ~%fx_param2%~
                        SPRINT EVALUATE_BUFFER ~effect_%fx_num%_resource~ ~%fx_resource%~
                        SPRINT EVALUATE_BUFFER ~effect_%fx_num%_timing~ ~%fx_timing%~
                        SPRINT EVALUATE_BUFFER ~effect_%fx_num%_probability1~ ~%fx_probability1%~
                        SPRINT EVALUATE_BUFFER ~effect_%fx_num%_probability2~ ~%fx_probability2%~
                        SPRINT EVALUATE_BUFFER ~effect_%fx_num%_duration~ ~%fx_duration%~
                        SPRINT EVALUATE_BUFFER ~effect_%fx_num%_power~ ~%fx_power%~
                        SPRINT EVALUATE_BUFFER ~effect_%fx_num%_dispel~ ~%fx_dispel%~
                        SET fx_line += 1
                    END
                BUT_ONLY_IF_IT_CHANGES
                END // INNER_ACTION
                END // ACTION_IF
                
                FOR (i = 1; i <= %fx_num%; i += 1) BEGIN
                    SPRINT thisstring EVALUATE_BUFFER ~effect_%i%_type~
                    SPRINT fx_type EVALUATE_BUFFER ~%%thisstring%%~
                    SPRINT thisstring EVALUATE_BUFFER ~effect_%i%_target~
                    SPRINT fx_target EVALUATE_BUFFER ~%%thisstring%%~
                    SPRINT thisstring EVALUATE_BUFFER ~effect_%i%_param1~
                    SPRINT fx_param1 EVALUATE_BUFFER ~%%thisstring%%~
                    SPRINT thisstring EVALUATE_BUFFER ~effect_%i%_param2~
                    SPRINT fx_param2 EVALUATE_BUFFER ~%%thisstring%%~
                    SPRINT thisstring EVALUATE_BUFFER ~effect_%i%_resource~
                    SPRINT fx_resource EVALUATE_BUFFER ~%%thisstring%%~
                    SPRINT thisstring EVALUATE_BUFFER ~effect_%i%_timing~
                    SPRINT fx_timing EVALUATE_BUFFER ~%%thisstring%%~
                    SPRINT thisstring EVALUATE_BUFFER ~effect_%i%_probability1~
                    SPRINT fx_probability1 EVALUATE_BUFFER ~%%thisstring%%~
                    SPRINT thisstring EVALUATE_BUFFER ~effect_%i%_probability2~
                    SPRINT fx_probability2 EVALUATE_BUFFER ~%%thisstring%%~
                    SPRINT thisstring EVALUATE_BUFFER ~effect_%i%_duration~
                    SPRINT fx_duration EVALUATE_BUFFER ~%%thisstring%%~
                    SPRINT thisstring EVALUATE_BUFFER ~effect_%i%_power~
                    SPRINT fx_power EVALUATE_BUFFER ~%%thisstring%%~
                    SPRINT thisstring EVALUATE_BUFFER ~effect_%i%_dispel~
                    SPRINT fx_dispel EVALUATE_BUFFER ~%%thisstring%%~
                    //PATCH_PRINT ~index:%i%, fx_type=%fx_type% / fx_resource=%fx_resource%~
                    INSERT_BYTES %effect_off% 0x108
                    WRITE_LONG (%effect_off% + 0x08) %fx_type%
                    PATCH_IF (! "%fx_target%" STRING_EQUAL "[NULL]") BEGIN
                    	WRITE_LONG (%effect_off% + 0x0c) %fx_target%
                    END
                    PATCH_IF (! "%fx_power%" STRING_EQUAL "[NULL]") BEGIN
                    	WRITE_LONG (%effect_off% + 0x10) %fx_power%
                    END
                    PATCH_IF (! "%fx_param1%" STRING_EQUAL "[NULL]") BEGIN
                    	WRITE_LONG (%effect_off% + 0x14) %fx_param1%
                    END
                    PATCH_IF (! "%fx_param2%" STRING_EQUAL "[NULL]") BEGIN
                    	WRITE_LONG (%effect_off% + 0x18) %fx_param2%
                    END
                    PATCH_IF (! "%fx_timing%" STRING_EQUAL "[NULL]") BEGIN
                    	WRITE_SHORT (%effect_off% + 0x1c) %fx_timing%
                    END
                    PATCH_IF (! "%fx_duration%" STRING_EQUAL "[NULL]") BEGIN
                    	WRITE_LONG (%effect_off% + 0x20) %fx_duration%
                    END
                    PATCH_IF (! "%fx_probability1%" STRING_EQUAL "[NULL]") BEGIN
                    	WRITE_SHORT (%effect_off% + 0x24) %fx_probability1%
                    END
                    PATCH_IF (! "%fx_probability2%" STRING_EQUAL "[NULL]") BEGIN
                    	WRITE_SHORT (%effect_off% + 0x26) %fx_probability2%
                    END
                    PATCH_IF (! "%fx_resource%" STRING_EQUAL "[NULL]") BEGIN
                    	WRITE_EVALUATED_ASCII (%effect_off% + 0x28) ~%fx_resource%~
                    END
                    PATCH_IF (! "%fx_dispel%" STRING_EQUAL "[NULL]") BEGIN
                    	WRITE_LONG (%effect_off% + 0x54) %fx_dispel%
                    END
                    SET effect_count += 1
                    SET item_off += 0x108
                    SET slot_off += 0x108
                END

                // ************************************************************************                
                // Items
                // ************************************************************************                
                SET slot_offset = 0
                FOR(itmnum = 1; itmnum <= 37; itmnum += 1 ) BEGIN
                    SPRINT thisstring EVALUATE_BUFFER ~itemname%itmnum%~
                    SPRINT itemname EVALUATE_BUFFER ~%%thisstring%%~
                    SPRINT thisstring EVALUATE_BUFFER ~itemqty%itmnum%~
                    SPRINT itemqty EVALUATE_BUFFER ~%%thisstring%%~
                    PATCH_IF (! "%itemname%" STRING_EQUAL "[NULL]") BEGIN
                        //PATCH_PRINT ~item %itmnum% %itemname% %itemqty%~
                        PATCH_IF ("%itemname%" STRING_EQUAL "[REMOVE]") BEGIN
                            WRITE_SHORT (%slot_off% + %slot_offset%) 0xffffffff
                        END ELSE BEGIN
                            SET offset = %item_off% + (0x14 * %item_count%)
                            INSERT_BYTES %offset% 0x14
                            WRITE_EVALUATED_ASCII (%offset%) ~%itemname%~
                            WRITE_LONG (%offset% + 0x0a) %itemqty%
                            SET item_count += 1
                            SET slot_off += 0x14
                            WRITE_SHORT (%slot_off% + %slot_offset%) (%item_count% - 1)
                        END
                    END
                    SET slot_offset += 0x02
                END

                // Equiped weapon (must be done after inventory)
                PATCH_IF (! "%equiped_weapon%" STRING_EQUAL "[NULL]") BEGIN
                    WRITE_SHORT (%slot_off% + 0x4c) %equiped_weapon%
                END
                
                // ************************************************************************                
                // Write offset for spells-effects-items-slots
                // ************************************************************************                
                //PATCH_PRINT ~Write offset for spells-effects-items-slots~
                WRITE_LONG 0x2b0 %mem_spell_off%
                WRITE_LONG 0x2b4 %mem_spell_count%
                WRITE_LONG 0x2c4 %effect_off%
                WRITE_LONG 0x2c8 %effect_count%
                WRITE_LONG 0x2b8 %slot_off%
                WRITE_LONG 0x2bc %item_off%
                WRITE_LONG 0x2c0 %item_count%
                
                // Initialize number of spells to add for each spell level index
                FOR (i = 0; i <= 16; i += 1) BEGIN
                  SPRINT EVALUATE_BUFFER ~spl_mem_info_count_%i%~ ~0~
                END
                
                // Create a spells list
                SPRINT spell_file  ~2da/%cre%_spells.2da~
                INNER_ACTION BEGIN
                ACTION_IF FILE_EXISTS ~Enhanced_Creatures/%spell_file%~ THEN BEGIN
                  COPY ~Enhanced_Creatures/%spell_file%~ ~override~
                    COUNT_2DA_ROWS 4 spl_rows
                    SET spl_line = 0
                    WHILE (%spl_line% < %spl_rows%) BEGIN
                        READ_2DA_ENTRY %spl_line% 0 4 spl_creature
                        READ_2DA_ENTRY %spl_line% 1 4 spl_file
                        READ_2DA_ENTRY %spl_line% 2 4 spl_type
                        READ_2DA_ENTRY %spl_line% 3 4 spl_level
                        // Determine spell mem index
                        SET spl_mem_index = 0
                        PATCH_IF (%spl_type% = 1) BEGIN
                            SET spl_mem_index = 6 + %spl_level%
                            SPRINT spl_type_text ~wizard~
                        END
                        PATCH_IF (%spl_type% = 2) BEGIN
                            SET spl_mem_index = %spl_level% - 1
                            SPRINT spl_type_text ~priest~
                        END
                        PATCH_IF (%spl_type% = 4) BEGIN
                            SET spl_mem_index = 16
                            SPRINT spl_type_text ~innate~
                        END
                        // Get current number of spells in this index
                        SPRINT thisstring EVALUATE_BUFFER ~spl_mem_info_count_%spl_mem_index%~
                        SPRINT spl_mem_info_count EVALUATE_BUFFER ~%%thisstring%%~
                        SET spl_mem_info_count += 1
                        // Add spell to list
                        SPRINT EVALUATE_BUFFER ~spell_%spl_mem_index%_%spl_mem_info_count%~ ~%spl_file%~
                        SPRINT EVALUATE_BUFFER ~spell_type_%spl_mem_index%_%spl_mem_info_count%~ ~%spl_type_text%~
                        SPRINT EVALUATE_BUFFER ~spell_level_%spl_mem_index%_%spl_mem_info_count%~ ~%spl_level%~
                        SPRINT EVALUATE_BUFFER ~spl_mem_info_count_%spl_mem_index%~ ~%spl_mem_info_count%~
                        SET spl_line += 1
                    END
                  BUT_ONLY_IF_IT_CHANGES
                END // INNER_ACTION
                END // ACTION_IF
                
                // Build Spellbook from spells list
                SET total_spell = 0
                FOR (i = 0; i <= 16; i += 1) BEGIN
                    SPRINT thisstring EVALUATE_BUFFER ~spl_mem_info_count_%i%~
                    SPRINT spl_mem_info_count EVALUATE_BUFFER ~%%thisstring%%~
                    // write spells
                    FOR (j = 1; j <= %spl_mem_info_count%; j += 1) BEGIN
                        SPRINT thisstring EVALUATE_BUFFER ~spell_%i%_%j%~
                        SPRINT spl_file EVALUATE_BUFFER ~%%thisstring%%~
                        SPRINT thisstring EVALUATE_BUFFER ~spell_type_%i%_%j%~
                        SPRINT spl_type EVALUATE_BUFFER ~%%thisstring%%~
                        SPRINT thisstring EVALUATE_BUFFER ~spell_level_%i%_%j%~
                        SPRINT spl_level EVALUATE_BUFFER ~%%thisstring%%~
                        //PATCH_PRINT ~index:%i%-%j%, idx_start=%idx_start%, spell:%spl_file%, level:%spl_level%, type:%spl_type%~
                        PATCH_IF (%spl_level% = 1) BEGIN
                          ADD_MEMORIZED_SPELL ~%spl_file%~ #0 ~%spl_type%~
                        END
                        PATCH_IF (%spl_level% = 2) BEGIN
                          ADD_MEMORIZED_SPELL ~%spl_file%~ #1 ~%spl_type%~
                        END
                        PATCH_IF (%spl_level% = 3) BEGIN
                          ADD_MEMORIZED_SPELL ~%spl_file%~ #2 ~%spl_type%~
                        END
                        PATCH_IF (%spl_level% = 4) BEGIN
                          ADD_MEMORIZED_SPELL ~%spl_file%~ #3 ~%spl_type%~
                        END
                        PATCH_IF (%spl_level% = 5) BEGIN
                          ADD_MEMORIZED_SPELL ~%spl_file%~ #4 ~%spl_type%~
                        END
                        PATCH_IF (%spl_level% = 6) BEGIN
                          ADD_MEMORIZED_SPELL ~%spl_file%~ #5 ~%spl_type%~
                        END
                        PATCH_IF (%spl_level% = 7) BEGIN
                          ADD_MEMORIZED_SPELL ~%spl_file%~ #6 ~%spl_type%~
                        END
                        PATCH_IF (%spl_level% = 8) BEGIN
                          ADD_MEMORIZED_SPELL ~%spl_file%~ #7 ~%spl_type%~
                        END
                        PATCH_IF (%spl_level% = 9) BEGIN
                          ADD_MEMORIZED_SPELL ~%spl_file%~ #8 ~%spl_type%~
                        END
                    END
                END
                
            BUT_ONLY_IF_IT_CHANGES // Creature opened
        END // INNER_ACTION
        END // ACTION_IF
    END // FOR
BUT_ONLY_IF_IT_CHANGES

END // Macro



// Copy itemSource effects into itemDestination
DEFINE_ACTION_MACRO ~COPY_ITEM_EFFECTS~ BEGIN
  COPY_EXISTING ~%itemDestination%.ITM~ ~override~
      READ_LONG 0x64 abil_off
      READ_SHORT 0x68 abil_num
      READ_LONG 0x6a fx_off
      READ_SHORT 0x70 fx_global_num
  
      INNER_ACTION BEGIN
        COPY_EXISTING ~%itemSource%.ITM~ ~override~
          READ_LONG 0x6a effect_off
          READ_SHORT 0x70 effect_num
          READ_ASCII %effect_off% clone (0x30 * %effect_num%)
        BUT_ONLY_IF_IT_CHANGES
      END
  
      INSERT_BYTES %fx_off% (0x30 * %effect_num%)
      WRITE_EVALUATED_ASCII %fx_off% ~%clone%~
  
      FOR (i = 0; i < %abil_num%; i += 1) BEGIN
        READ_SHORT (%abil_off% + %i% * 0x38 + 0x20) fx_abil_idx
        WRITE_SHORT (%abil_off% + %i% * 0x38 + 0x20) (%fx_abil_idx% + %effect_num%)
      END
  
      PATCH_IF (%abil_off% >= %fx_off%) BEGIN
       WRITE_LONG 0x64 (%abil_off% + 48)
      END
  
      SET fx_global_num += %effect_num%
      WRITE_SHORT 0x70 fx_global_num
  BUT_ONLY_IF_IT_CHANGES
END


// Copy spellSource effects into itemDestination
DEFINE_ACTION_MACRO ~COPY_SPELL_EFFECTS~ BEGIN
  COPY_EXISTING ~%itemDestination%.ITM~ ~override~
      READ_LONG 0x64 abil_off
      READ_SHORT 0x68 abil_num
      READ_LONG 0x6a fx_off
      READ_SHORT 0x70 fx_global_num
  
      INNER_ACTION BEGIN
        COPY_EXISTING ~%spellSource%.SPL~ ~override~
          READ_LONG 0x6a effect_off
          READ_SHORT 0x90 effect_num
          READ_ASCII %effect_off% clone (0x30 * %effect_num%)
        BUT_ONLY_IF_IT_CHANGES
      END
  
      INSERT_BYTES %fx_off% (0x30 * %effect_num%)
      WRITE_EVALUATED_ASCII %fx_off% ~%clone%~
  
      FOR (i = 0; i < %abil_num%; i += 1) BEGIN
        READ_SHORT (%abil_off% + %i% * 0x38 + 0x20) fx_abil_idx
        WRITE_SHORT (%abil_off% + %i% * 0x38 + 0x20) (%fx_abil_idx% + %effect_num%)
      END
  
      PATCH_IF (%abil_off% >= %fx_off%) BEGIN
       WRITE_LONG 0x64 (%abil_off% + 48)
      END
  
      SET fx_global_num += %effect_num%
      WRITE_SHORT 0x70 fx_global_num
      
      FOR (i = 0; i < %fx_global_num%; i += 1) BEGIN
        WRITE_BYTE (%fx_off% + %i% * 0x30 + 0xc) 2 // Timing: While equipped
        WRITE_LONG (%fx_off% + %i% * 0x30 + 0xd) 0 // duration
      END
  BUT_ONLY_IF_IT_CHANGES
END


// Disable spellcasting effects for item (wizard and priest)
DEFINE_ACTION_MACRO ~ITEM_DISABLE_SPELLCASTING_EFFECTS~ BEGIN
  COPY_EXISTING ~%item%.ITM~ ~override~
      READ_LONG 0x64 abil_off
      READ_SHORT 0x68 abil_num
      READ_LONG 0x6a fx_off
      READ_SHORT 0x70 fx_global_num
  
      INSERT_BYTES %fx_off% (0x30)
      WRITE_SHORT (%fx_off% + 0x0) 145 // Opcode: Disable spellcasting
      WRITE_BYTE (%fx_off% + 0x2) 1 // target: self
      WRITE_LONG (%fx_off% + 0x8) 0 // Wizard
      WRITE_BYTE (%fx_off% + 0xc) 2 // Timing: While equipped
      WRITE_BYTE (%fx_off% + 0x12) 100 // Probability 1 - max
      
      INSERT_BYTES %fx_off% (0x30)
      WRITE_SHORT (%fx_off% + 0x0) 145 // Opcode: Disable spellcasting
      WRITE_BYTE (%fx_off% + 0x2) 1 // target: self
      WRITE_LONG (%fx_off% + 0x8) 1 // Priest
      WRITE_BYTE (%fx_off% + 0xc) 2 // Timing: While equipped
      WRITE_BYTE (%fx_off% + 0x12) 100 // Probability 1 - max
  
      FOR (i = 0; i < %abil_num%; i += 1) BEGIN
        READ_SHORT (%abil_off% + %i% * 0x38 + 0x20) fx_abil_idx
        WRITE_SHORT (%abil_off% + %i% * 0x38 + 0x20) (%fx_abil_idx% + 2)
      END
  
      PATCH_IF (%abil_off% >= %fx_off%) BEGIN
       WRITE_LONG 0x64 (%abil_off% + 48)
      END
  
      SET fx_global_num += 2
      WRITE_SHORT 0x70 fx_global_num
  BUT_ONLY_IF_IT_CHANGES
END


// Add movement rate effect for an item
DEFINE_ACTION_MACRO ~ITEM_MOVEMENT_RATE_EFFECT~ BEGIN
  COPY_EXISTING ~%item%.ITM~ ~override~
      READ_LONG 0x64 abil_off
      READ_SHORT 0x68 abil_num
      READ_LONG 0x6a fx_off
      READ_SHORT 0x70 fx_global_num
  
      INSERT_BYTES %fx_off% (0x30)
      WRITE_SHORT (%fx_off% + 0x0) 126 // Opcode: Movement rate bonus
      WRITE_BYTE (%fx_off% + 0x2) 1 // target: self
      WRITE_LONG (%fx_off% + 0x4) %bonus% // bonus
      WRITE_BYTE (%fx_off% + 0xc) 2 // Timing: While equipped
      WRITE_BYTE (%fx_off% + 0x12) 100 // Probability 1 - max
  
      FOR (i = 0; i < %abil_num%; i += 1) BEGIN
        READ_SHORT (%abil_off% + %i% * 0x38 + 0x20) fx_abil_idx
        WRITE_SHORT (%abil_off% + %i% * 0x38 + 0x20) (%fx_abil_idx% + 1)
      END
  
      PATCH_IF (%abil_off% >= %fx_off%) BEGIN
       WRITE_LONG 0x64 (%abil_off% + 48)
      END
  
      SET fx_global_num += 1
      WRITE_SHORT 0x70 fx_global_num
  BUT_ONLY_IF_IT_CHANGES
END


// Add effect to an item
DEFINE_ACTION_MACRO ~ADD_EFFECT_ITEM~ BEGIN
  COPY_EXISTING ~%item%.ITM~ ~override~
      READ_LONG 0x64 abil_off
      READ_SHORT 0x68 abil_num
      READ_LONG 0x6a fx_off
      READ_SHORT 0x70 fx_global_num
  
      INSERT_BYTES %fx_off% (0x30)
      WRITE_SHORT (%fx_off% + 0x0) %opcode%
      WRITE_BYTE (%fx_off% + 0x2) 1 // target: self
      WRITE_LONG (%fx_off% + 0x4) %param1%
      WRITE_LONG (%fx_off% + 0x8) %param2%
      WRITE_BYTE (%fx_off% + 0xc) 2 // Timing: While equipped
      WRITE_BYTE (%fx_off% + 0x12) 100 // Probability 1
  
      FOR (i = 0; i < %abil_num%; i += 1) BEGIN
        READ_SHORT (%abil_off% + %i% * 0x38 + 0x20) fx_abil_idx
        WRITE_SHORT (%abil_off% + %i% * 0x38 + 0x20) (%fx_abil_idx% + 1)
      END
  
      PATCH_IF (%abil_off% >= %fx_off%) BEGIN
       WRITE_LONG 0x64 (%abil_off% + 48)
      END
  
      SET fx_global_num += 1
      WRITE_SHORT 0x70 fx_global_num
  BUT_ONLY_IF_IT_CHANGES
END


// Detectable spells
DEFINE_ACTION_MACRO ~DETECTABLE_SPELLS~ BEGIN

COPY ~%ds_file%~ ~override~
  COUNT_2DA_ROWS 6 ds_rowcount
  //SET stat_number = 401
  FOR (iDetectableSpell = 0; iDetectableSpell < ds_rowcount; iDetectableSpell = iDetectableSpell + 1) BEGIN
    READ_2DA_ENTRY %iDetectableSpell% 0 6 spell
    READ_2DA_ENTRY %iDetectableSpell% 1 6 opcode
    READ_2DA_ENTRY %iDetectableSpell% 2 6 value
    READ_2DA_ENTRY %iDetectableSpell% 3 6 stat
    READ_2DA_ENTRY %iDetectableSpell% 4 6 clone_op
    READ_2DA_ENTRY %iDetectableSpell% 5 6 type

    SET statsInsert = 0
    SET first_number = 401
    INNER_ACTION BEGIN
      COPY_EXISTING ~STATS.IDS~ ~override/STATS.IDS~
        COUNT_2DA_ROWS 2 stats_rowcount
        // search if stat already exists    
        SET i = 0
        SET found = 0
        WHILE (i < %stats_rowcount% AND %found% = 0) BEGIN
          READ_2DA_ENTRY %i% 0 2 num
          READ_2DA_ENTRY %i% 1 2 name
          PATCH_IF ("%name%" STRING_COMPARE_CASE "%stat%" = 0) BEGIN
            SET found = 1
            SET stat_number = num
          END ELSE BEGIN
            SET i += 1
          END
        END
        PATCH_IF (%found% = 0) BEGIN
          SET stat_number = 1
          PATCH_IF (%opcode% = 318) BEGIN
            // if opcode is 318, we insert in extended stats
            SET stat_number = %first_number%
          END
          // stat doesn't exist yet, find a free number to insert it. 
          SET foundFreeNumber = 0
          WHILE (%foundFreeNumber% = 0) BEGIN
            SET foundStatNumber = 0
            SET i = 0
            WHILE (%i% < %stats_rowcount% AND %foundStatNumber% = 0) BEGIN
              READ_2DA_ENTRY %i% 0 2 num
              PATCH_IF (%stat_number% = %num%) BEGIN
                SET foundStatNumber = 1
              END
              SET i+= 1
            END
            PATCH_IF (%foundStatNumber% = 0) BEGIN
              SET foundFreeNumber = 1
              SET statsInsert = 1
            END ELSE BEGIN
              SET stat_number += 1
            END
          END
        END
      BUT_ONLY_IF_IT_CHANGES
    END // INNER_ACTION

    PATCH_IF (~%type%~ STRING_COMPARE_CASE ~ITM~ = 0) BEGIN
      SPRINT file ~%spell%.ITM~
      SET extended_size = 0x38
    END ELSE BEGIN
      SPRINT file ~%spell%.SPL~
      SET extended_size = 0x28
    END
    
    // handle error
    PATCH_IF ((%opcode% = 318 AND %stat_number% < %first_number%) OR (%opcode% != 318 AND %stat_number% >= %first_number%)) BEGIN
      PATCH_PRINT ~%spell% %stat% %stat_number%, stat number doesnt match opcode~
    END
    PATCH_IF (%statsInsert% = 1) BEGIN
      PATCH_PRINT ~Appending %spell% %stat_number% %stat%~
      INNER_ACTION BEGIN
        APPEND ~STATS.IDS~ ~%stat_number% %stat%~ UNLESS ~%stat%~
      END
    END
    
    INNER_ACTION BEGIN
    ACTION_IF FILE_EXISTS_IN_GAME ~%file%~ THEN BEGIN
      COPY_EXISTING ~%file%~ ~override~
        READ_LONG  0x64 abil_off
        READ_SHORT 0x68 abil_num
        READ_LONG  0x6a fx_off
        READ_SHORT  0x70 fx_num
        SET delta = 0
        FOR (index = 0; index < abil_num; index = index + 1) BEGIN
          READ_SHORT (%abil_off% + 0x1e + (%extended_size% * %index%)) abil_fx_num
          READ_SHORT (%abil_off% + 0x20 + (%extended_size% * %index%)) abil_fx_idx
          SET abil_fx_idx = (%abil_fx_idx% + %delta%)
          WRITE_SHORT (%abil_off% + 0x20 + (%extended_size% * %index%)) %abil_fx_idx%
          //PATCH_PRINT ~%file% opcode %opcode% for stat %stat_number% %stat%~
          SET clone_found = 0
          FOR (index2 = 0; index2 < abil_fx_num; index2 = index2 + 1) BEGIN
            READ_SHORT   (%fx_off% +        (0x30 * (%abil_fx_idx% + %index2%))) current_opcode ELSE 999999 // allowing for possible corruption
            READ_SHORT   (%fx_off% + 0x04 + (0x30 * (%abil_fx_idx% + %index2%))) old_value
            READ_SHORT   (%fx_off% + 0x08 + (0x30 * (%abil_fx_idx% + %index2%))) old_stat
            PATCH_IF (%clone_found% = 0 AND %current_opcode% = %clone_op%) BEGIN // opcode to clone
              SET clone_found = 1
              READ_ASCII   (%fx_off% +        (0x30 * (%abil_fx_idx% + %index2%))) clone (0x30)
              READ_BYTE    (%fx_off% + 0x0c + (0x30 * (%abil_fx_idx% + %index2%))) clone_timing
              READ_LONG    (%fx_off% + 0x0e + (0x30 * (%abil_fx_idx% + %index2%))) clone_duration
            END ELSE PATCH_IF (%current_opcode% = %opcode% AND %old_stat% = %stat_number%) BEGIN // if opcode already exists with same stat
              PATCH_IF (%old_value% != %value%) BEGIN
                // different values, write a warning
                PATCH_PRINT ~%file% : already found detectable effect, but different value~
                //WRITE_BYTE (%fx_off% + 0x12 + (0x30 * (%abil_fx_idx% + %index2%))) 0 // set prob to 0
              END ELSE BEGIN
                // same value, do nothing
                SET clone_found = 999999
              END
            END
          END
          PATCH_IF (%clone_found% = 1) BEGIN
            PATCH_IF (%opcode% = 318 AND (%clone_timing% = 1 OR %clone_timing% = 2 OR %clone_timing% = 4 OR %clone_timing% = 5 OR %clone_timing% = 9)) BEGIN
              // permanent duration doesn't work with tobEx, change to limited with maximum duration
              //PATCH_PRINT ~timing changed to 10 with maximum duration~
              SET clone_timing = 10
              SET clone_duration = 2147483647
            END
            //PATCH_PRINT ~clone %clone_op%, timing:  %clone_timing%, duration: %clone_duration%~
            INSERT_BYTES          (%fx_off% +        (0x30 * %abil_fx_idx%)) 0x30        // insert bytes for new effect
            WRITE_EVALUATED_ASCII (%fx_off% +        (0x30 * %abil_fx_idx%)) "%clone%"   // copy clone
            WRITE_SHORT           (%fx_off% +        (0x30 * %abil_fx_idx%)) %opcode%
            WRITE_LONG            (%fx_off% + 0x04 + (0x30 * %abil_fx_idx%)) %value%
            WRITE_LONG            (%fx_off% + 0x08 + (0x30 * %abil_fx_idx%)) %stat_number%
            WRITE_BYTE            (%fx_off% + 0x0c + (0x30 * %abil_fx_idx%)) %clone_timing%
            WRITE_LONG            (%fx_off% + 0x0e + (0x30 * %abil_fx_idx%)) %clone_duration%
            SET delta += 1
            WRITE_SHORT (%abil_off% + 0x1e + (%extended_size% * %index%)) (%abil_fx_num% + 1)
          END
        END // closes for
        
        PATCH_IF (~%type%~ STRING_COMPARE_CASE ~ITM~ = 0) BEGIN
          SET clone_found = 0
          FOR (index = 0; index < fx_num; index = index + 1) BEGIN
            READ_SHORT  (%fx_off% +        (0x30 * %index%)) current_opcode ELSE 999999 // allowing for possible corruption
            READ_SHORT  (%fx_off% + 0x04 + (0x30 * %index%)) old_value
            READ_SHORT  (%fx_off% + 0x08 + (0x30 * %index%)) old_stat
            PATCH_IF (%clone_found% = 0 AND %current_opcode% = %clone_op%) BEGIN // opcode to clone
              SET clone_found = 1
              READ_ASCII   (%fx_off% +        (0x30 * %index%)) clone (0x30)
              READ_BYTE    (%fx_off% + 0x0c + (0x30 * %index%)) clone_timing
              READ_LONG    (%fx_off% + 0x0e + (0x30 * %index%)) clone_duration
            END ELSE PATCH_IF (%current_opcode% = %opcode% AND %old_stat% = %stat_number%) BEGIN // if opcode already exists with same stat
              PATCH_IF (%old_value% != %value%) BEGIN
                // different values
                WRITE_BYTE (%fx_off% + 0x12 + (0x30 * %index%)) 0 // set prob to 0
              END ELSE BEGIN
                // same value, do nothing
                SET clone_found = 999999
              END
            END
          END
          PATCH_IF (%clone_found% = 1) BEGIN
            PATCH_IF (%opcode% = 318 AND (%clone_timing% = 1 OR %clone_timing% = 2 OR %clone_timing% = 4 OR %clone_timing% = 5 OR %clone_timing% = 9)) BEGIN
              // permanent duration doesn't work with tobEx, change to limited with maximum duration
              //PATCH_PRINT ~timing changed to 10 with maximum duration~
              SET clone_timing = 10
              SET clone_duration = 2147483647
            END
            //PATCH_PRINT ~clone %clone_op%, timing:  %clone_timing%, duration: %clone_duration%~
            PATCH_IF %opcode% = 282 BEGIN
              SET stat_number -= 156
            END
            INSERT_BYTES          (%fx_off% +        (0x30 * %index%)) 0x30        // insert bytes for new effect
            WRITE_EVALUATED_ASCII (%fx_off% +        (0x30 * %index%)) "%clone%"   // copy clone
            WRITE_SHORT           (%fx_off% +        (0x30 * %index%)) %opcode%
            WRITE_LONG            (%fx_off% + 0x04 + (0x30 * %index%)) %value%
            WRITE_LONG            (%fx_off% + 0x08 + (0x30 * %index%)) %stat_number%
            WRITE_BYTE            (%fx_off% + 0x0c + (0x30 * %index%)) %clone_timing%
            WRITE_LONG            (%fx_off% + 0x0e + (0x30 * %index%)) %clone_duration%
            WRITE_SHORT  0x70 (%fx_num% + 1)
          END
        END
        
      BUT_ONLY_IF_IT_CHANGES // Spell or item opened
    END // ACTION_IF
    END // INNER_ACTION
    
  END // FOR iDetectableSpell
BUT_ONLY_IF_IT_CHANGES

END